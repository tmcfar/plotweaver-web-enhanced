"""Pydantic models for story generation API endpoints."""

import uuid
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field


class Genre(str, Enum):
    """Story genre enumeration."""
    fantasy = "fantasy"
    science_fiction = "science_fiction"
    mystery = "mystery"
    romance = "romance"
    thriller = "thriller"
    historical = "historical"
    literary = "literary"


class StoryLength(str, Enum):
    """Story length enumeration."""
    short = "short"    # 1-3 scenes, ~2000 words
    medium = "medium"  # 4-8 scenes, ~5000 words
    long = "long"      # 9-15 scenes, ~10000 words


class StoryParameters(BaseModel):
    """Story generation parameters."""
    tone: Optional[str] = Field(None, description="Overall story tone", max_length=100)
    setting: Optional[str] = Field(None, description="Story setting description", max_length=200)
    protagonist_count: Optional[int] = Field(1, ge=1, le=5, description="Number of main characters")
    antagonist_required: Optional[bool] = Field(True, description="Whether story needs an antagonist")
    themes: Optional[List[str]] = Field(None, max_items=5, description="Major themes to explore")
    custom_prompt: Optional[str] = Field(None, max_length=500, description="Additional guidance for story generation")


class QualityGates(BaseModel):
    """Quality gate configuration."""
    enabled: bool = Field(True, description="Whether quality gates are enabled")
    thresholds: Dict[str, float] = Field(
        default_factory=lambda: {
            "voice_consistency": 0.7,
            "repetition_score": 0.3
        },
        description="Quality thresholds"
    )


class GenerationOptions(BaseModel):
    """Story generation options."""
    quality_gates: Optional[QualityGates] = None
    cost_limit: Optional[float] = Field(None, description="Maximum cost in USD")
    time_limit: Optional[int] = Field(None, description="Maximum generation time in seconds")


class StoryGenerationRequest(BaseModel):
    """Request model for story generation."""
    genre: Genre = Field(..., description="Story genre")
    length: StoryLength = Field(..., description="Target story length")
    parameters: Optional[StoryParameters] = None
    options: Optional[GenerationOptions] = None


class GenerationStartResponse(BaseModel):
    """Response when starting generation."""
    generation_id: str = Field(..., description="Unique generation identifier")
    status: str = Field(..., description="Generation status")
    estimated_duration: Optional[int] = Field(None, description="Estimated duration in seconds")
    stream_url: Optional[str] = Field(None, description="SSE endpoint for progress updates")


class GenerationStatus(str, Enum):
    """Generation status enumeration."""
    queued = "queued"
    processing = "processing"
    completed = "completed"
    failed = "failed"
    cancelled = "cancelled"


class GenerationStage(str, Enum):
    """Generation stage enumeration."""
    initialization = "initialization"
    concept = "concept"
    plot = "plot"
    characters = "characters"
    scenes = "scenes"
    quality_check = "quality_check"


class AgentStatus(str, Enum):
    """Agent execution status."""
    pending = "pending"
    executing = "executing"
    completed = "completed"
    failed = "failed"


class AgentStatusItem(BaseModel):
    """Individual agent status."""
    agent: str
    status: AgentStatus
    duration: Optional[float] = None


class ProgressInfo(BaseModel):
    """Generation progress information."""
    percentage: int = Field(..., ge=0, le=100)
    current_stage: GenerationStage
    agent_status: List[AgentStatusItem] = Field(default_factory=list)


class GenerationResult(BaseModel):
    """Generation result information."""
    story_id: Optional[str] = None
    success: bool
    error: Optional[str] = None


class GenerationStatusResponse(BaseModel):
    """Full generation status response."""
    generation_id: str
    status: GenerationStatus
    started_at: datetime
    completed_at: Optional[datetime] = None
    progress: Optional[ProgressInfo] = None
    result: Optional[GenerationResult] = None


class Character(BaseModel):
    """Character information."""
    id: str
    name: str
    role: str
    description: Optional[str] = None
    traits: List[str] = Field(default_factory=list)


class Scene(BaseModel):
    """Scene information."""
    id: str
    title: str
    content: str = Field(..., description="Full scene text")
    setting: Optional[str] = None
    characters: List[str] = Field(default_factory=list, description="Character IDs in scene")
    word_count: Optional[int] = None


class PlotStructure(BaseModel):
    """Plot structure information."""
    synopsis: str
    acts: List[Dict[str, Any]] = Field(default_factory=list)


class QualityScores(BaseModel):
    """Quality assessment scores."""
    overall: float = Field(..., ge=0, le=1)
    voice_consistency: float = Field(..., ge=0, le=1)
    plot_coherence: float = Field(..., ge=0, le=1)
    repetition_score: float = Field(..., ge=0, le=1, description="Lower is better")
    readability: float = Field(..., ge=0, le=100)


class Story(BaseModel):
    """Complete story object."""
    id: str
    title: str
    genre: Genre
    content: Dict[str, Any] = Field(
        description="Story content including plot, characters, and scenes"
    )
    metadata: Dict[str, Any] = Field(default_factory=dict)
    quality_scores: Optional[QualityScores] = None
    created_at: datetime


class ErrorResponse(BaseModel):
    """Error response model."""
    code: str
    message: str
    details: Optional[Dict[str, Any]] = None


class ValidationError(BaseModel):
    """Validation error response."""
    code: str
    message: str
    errors: List[Dict[str, str]] = Field(default_factory=list)